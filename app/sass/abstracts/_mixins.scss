/* mixins */
@mixin psd ($width, $height) {
    content: '';
    display: block;
    height: $height;
    position: absolute;
    width: $width;
}

@mixin trans($tr-property: all, $tr-duration: .15s, $tr-timing-function: ease-in, $tr-delay: 0s) {
    transition: $tr-property $tr-duration $tr-timing-function $tr-delay;
}

@mixin neuro-out {
    background: rgb(238, 238, 238);
    border-bottom: 1px solid rgba(81, 81, 90, 0.3);
    box-shadow: rgb(240, 240, 241) 0px 2px 2px, rgb(240, 240, 241) 0px 4px 4px, rgb(240, 240, 241) 0px 8px 8px, rgb(240, 240, 241) rem(0 16 16), rgb(240, 240, 241) rem(0 32 32), rgb(240, 240, 241) rem(0 58 58);
    transition: background 0.25s ease-out 0s;
}

@mixin media($query) {
    @each $media-name in $query {
        @if map-has-key($breakpoints, $media-name) {
            // Store the keys of the map as a list
            $values: map-keys($breakpoints);

            // define media
            @media all and (min-width: map-get($breakpoints, $media-name)) { @content; }
        }

        @else {
            @warn 'Unfortunately, no value could be retrieved from `#{$media-name}`.';
        }
    }
}

@mixin grad($deg, $key) {
    background: linear-gradient($deg+deg, gradient($key));
}

@mixin container {
    margin: 0 auto;
    max-width: 1200px;
    padding: 0 15px;
    position: relative;
    width: 100%;
}

@mixin container-fluid {
    margin-left: auto;
    margin-right: auto;
    padding-left: 15px;
    padding-right: 15px;
}

@mixin grad-icon($fz: 18, $grad: 7) {
    background: linear-gradient(-180deg, gradient($grad));
    border-radius: rem(100);
    display: inline-block;
    font-size: rem($fz);
    height: rem($fz*1.75);
    line-height: rem($fz*1.75);
    text-align: center;
    width: rem($fz*1.75);

    @if ($grad == 10) {
        color: colors(black);
    } @else if ($grad == 3) {
        color: colors(black);
    } @else {
        color: colors(white);
    }
}